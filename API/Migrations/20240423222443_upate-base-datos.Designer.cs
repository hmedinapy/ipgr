// <auto-generated />
using System;
using API.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(DbTest3Context))]
    [Migration("20240423222443_upate-base-datos")]
    partial class upatebasedatos
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API.Models.AnalisisRiesgo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<string>("AgenteGenerador")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("agente_generador");

                    b.Property<string>("Causa")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("causa");

                    b.Property<string>("Efecto")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("efecto");

                    b.Property<int?>("IdArea")
                        .HasColumnType("int")
                        .HasColumnName("id_area");

                    b.Property<int?>("IdRiesgo")
                        .HasColumnType("int")
                        .HasColumnName("id_riesgo");

                    b.Property<int>("Impacto")
                        .HasColumnType("int")
                        .HasColumnName("impacto");

                    b.Property<string>("NivelRiesgo")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("nivel_riesgo")
                        .IsFixedLength();

                    b.Property<int>("Probabilidad")
                        .HasColumnType("int")
                        .HasColumnName("probabilidad");

                    b.Property<int>("Resultado")
                        .HasColumnType("int")
                        .HasColumnName("resultado");

                    b.Property<string>("Significado")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("significado");

                    b.HasKey("Id");

                    b.HasIndex("IdArea");

                    b.HasIndex("IdRiesgo");

                    b.ToTable("analisis_riesgo", (string)null);
                });

            modelBuilder.Entity("API.Models.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("descripcion");

                    b.Property<int>("IdDepartamento")
                        .HasColumnType("int")
                        .HasColumnName("id_departamento");

                    b.Property<int?>("IdEmpresa")
                        .HasColumnType("int")
                        .HasColumnName("id_empresa");

                    b.HasKey("Id");

                    b.HasIndex("IdDepartamento");

                    b.HasIndex("IdEmpresa");

                    b.ToTable("area", (string)null);
                });

            modelBuilder.Entity("API.Models.Departamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("descripcion");

                    b.Property<int>("IdEmpresa")
                        .HasColumnType("int")
                        .HasColumnName("id_empresa");

                    b.HasKey("Id");

                    b.HasIndex("IdEmpresa");

                    b.ToTable("departamento", (string)null);
                });

            modelBuilder.Entity("API.Models.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<string>("CodigoEmpresa")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("codigo_empresa");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("direccion");

                    b.Property<DateTime?>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_creacion")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_modificacion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nombre");

                    b.Property<string>("Ruc")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ruc");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("telefono");

                    b.Property<int?>("UsuarioCreacion")
                        .HasColumnType("int")
                        .HasColumnName("usuario_creacion");

                    b.Property<int?>("UsuarioModificacion")
                        .HasColumnType("int")
                        .HasColumnName("usuario_modificacion");

                    b.HasKey("Id");

                    b.ToTable("empresa", (string)null);
                });

            modelBuilder.Entity("API.Models.PlanTrabajo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<int?>("CantidadPersonas")
                        .HasColumnType("int")
                        .HasColumnName("cantidad_personas");

                    b.Property<string>("Codigo")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("codigo");

                    b.Property<string>("EnvioInforme")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("envio_informe")
                        .IsFixedLength();

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("estado")
                        .IsFixedLength();

                    b.Property<DateOnly>("FechaCreada")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("fecha_creada")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly>("FechaFinAuditoria")
                        .HasColumnType("date")
                        .HasColumnName("fecha_fin_auditoria");

                    b.Property<DateOnly>("FechaIncioAuditoria")
                        .HasColumnType("date")
                        .HasColumnName("fecha_incio_auditoria");

                    b.Property<int?>("HorasNetas")
                        .HasColumnType("int")
                        .HasColumnName("horas_netas");

                    b.Property<int?>("IdAreaAuditada")
                        .HasColumnType("int")
                        .HasColumnName("id_area_auditada");

                    b.Property<int?>("IdAuditorAsignado")
                        .HasColumnType("int")
                        .HasColumnName("id_auditor_asignado");

                    b.Property<int?>("IdDepartamento")
                        .HasColumnType("int")
                        .HasColumnName("id_departamento");

                    b.Property<int?>("IdDepartamentoNavigation")
                        .HasColumnType("int");

                    b.Property<int?>("IdResponsableAreaAuditada")
                        .HasColumnType("int")
                        .HasColumnName("id_responsable_area_auditada");

                    b.Property<int>("IdUserCreada")
                        .HasColumnType("int")
                        .HasColumnName("id_user_creada");

                    b.Property<int?>("Numero")
                        .HasColumnType("int")
                        .HasColumnName("numero");

                    b.Property<string>("Objetivos")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("objetivos");

                    b.Property<string>("Procedimientos")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("procedimientos");

                    b.Property<int?>("Productos")
                        .HasColumnType("int")
                        .HasColumnName("productos");

                    b.HasKey("Id");

                    b.HasIndex("IdAreaAuditada");

                    b.HasIndex("IdAuditorAsignado");

                    b.HasIndex("IdDepartamentoNavigation");

                    b.HasIndex("IdResponsableAreaAuditada");

                    b.ToTable("plan_trabajo", (string)null);
                });

            modelBuilder.Entity("API.Models.PlanTrabajoPunto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("descripcion");

                    b.Property<int>("IdPlanTrabajo")
                        .HasColumnType("int")
                        .HasColumnName("id_plan_trabajo");

                    b.Property<string>("TipoPunto")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasDefaultValue("L")
                        .HasColumnName("tipo_punto")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.HasIndex("IdPlanTrabajo");

                    b.ToTable("plan_trabajo_puntos", (string)null);
                });

            modelBuilder.Entity("API.Models.Riesgo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("descripcion");

                    b.Property<int>("UserCreado")
                        .HasColumnType("int")
                        .HasColumnName("user_creado");

                    b.HasKey("Id");

                    b.ToTable("riesgo", (string)null);
                });

            modelBuilder.Entity("API.Models.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("descripcion");

                    b.HasKey("Id");

                    b.ToTable("rol", (string)null);
                });

            modelBuilder.Entity("API.Models.UserRol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<int>("IdRol")
                        .HasColumnType("int")
                        .HasColumnName("id_rol");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("id_usuario");

                    b.HasKey("Id");

                    b.HasIndex("IdRol");

                    b.HasIndex("IdUsuario");

                    b.ToTable("user_rol", (string)null);
                });

            modelBuilder.Entity("API.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("apellido");

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("clave");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("direccion");

                    b.Property<DateOnly>("FechaCreada")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("fecha_creada")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("IdEmpresa")
                        .HasColumnType("int")
                        .HasColumnName("id_empresa");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("mail");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nombre");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("telefono");

                    b.Property<string>("Usuario1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("usuario");

                    b.HasKey("Id");

                    b.ToTable("usuario", (string)null);
                });

            modelBuilder.Entity("API.Models.AnalisisRiesgo", b =>
                {
                    b.HasOne("API.Models.Area", "IdAreaNavigation")
                        .WithMany("AnalisisRiesgos")
                        .HasForeignKey("IdArea")
                        .HasConstraintName("FK_analisis_riesgo_area");

                    b.HasOne("API.Models.Riesgo", "IdRiesgoNavigation")
                        .WithMany("AnalisisRiesgos")
                        .HasForeignKey("IdRiesgo")
                        .HasConstraintName("FK_analisis_riesgo_riesgo");

                    b.Navigation("IdAreaNavigation");

                    b.Navigation("IdRiesgoNavigation");
                });

            modelBuilder.Entity("API.Models.Area", b =>
                {
                    b.HasOne("API.Models.Departamento", "IdDepartamentoNavigation")
                        .WithMany("Areas")
                        .HasForeignKey("IdDepartamento")
                        .IsRequired()
                        .HasConstraintName("FK_area_departamento");

                    b.HasOne("API.Models.Empresa", "IdEmpresaNavigation")
                        .WithMany("Areas")
                        .HasForeignKey("IdEmpresa")
                        .HasConstraintName("FK_area_empresa");

                    b.Navigation("IdDepartamentoNavigation");

                    b.Navigation("IdEmpresaNavigation");
                });

            modelBuilder.Entity("API.Models.Departamento", b =>
                {
                    b.HasOne("API.Models.Empresa", "IdEmpresaNavigation")
                        .WithMany("Departamentos")
                        .HasForeignKey("IdEmpresa")
                        .IsRequired()
                        .HasConstraintName("FK_departamento_empresa");

                    b.Navigation("IdEmpresaNavigation");
                });

            modelBuilder.Entity("API.Models.PlanTrabajo", b =>
                {
                    b.HasOne("API.Models.Area", "IdAreaAuditadaNavigation")
                        .WithMany("PlanTrabajos")
                        .HasForeignKey("IdAreaAuditada")
                        .HasConstraintName("FK_plan_trabajo_area");

                    b.HasOne("API.Models.Usuario", "IdAuditorAsignadoNavigation")
                        .WithMany("PlanTrabajoIdAuditorAsignadoNavigations")
                        .HasForeignKey("IdAuditorAsignado")
                        .HasConstraintName("FK_plan_trabajo_usuario");

                    b.HasOne("API.Models.Departamento", "IdDepartamentoNavigation")
                        .WithMany()
                        .HasForeignKey("IdDepartamentoNavigation");

                    b.HasOne("API.Models.Usuario", "IdResponsableAreaAuditadaNavigation")
                        .WithMany("PlanTrabajoIdResponsableAreaAuditadaNavigations")
                        .HasForeignKey("IdResponsableAreaAuditada")
                        .HasConstraintName("FK_plan_trabajo_usuario1");

                    b.Navigation("IdAreaAuditadaNavigation");

                    b.Navigation("IdAuditorAsignadoNavigation");

                    b.Navigation("IdDepartamentoNavigation");

                    b.Navigation("IdResponsableAreaAuditadaNavigation");
                });

            modelBuilder.Entity("API.Models.PlanTrabajoPunto", b =>
                {
                    b.HasOne("API.Models.PlanTrabajo", "IdPlanTrabajoNavigation")
                        .WithMany("PlanTrabajoPuntos")
                        .HasForeignKey("IdPlanTrabajo")
                        .IsRequired()
                        .HasConstraintName("FK_plan_trabajo_puntos_plan_trabajo");

                    b.Navigation("IdPlanTrabajoNavigation");
                });

            modelBuilder.Entity("API.Models.UserRol", b =>
                {
                    b.HasOne("API.Models.Rol", "IdRolNavigation")
                        .WithMany("UserRols")
                        .HasForeignKey("IdRol")
                        .IsRequired()
                        .HasConstraintName("FK_user_rol_rol");

                    b.HasOne("API.Models.Usuario", "IdUsuarioNavigation")
                        .WithMany("UserRols")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("FK_user_rol_usuario");

                    b.Navigation("IdRolNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("API.Models.Area", b =>
                {
                    b.Navigation("AnalisisRiesgos");

                    b.Navigation("PlanTrabajos");
                });

            modelBuilder.Entity("API.Models.Departamento", b =>
                {
                    b.Navigation("Areas");
                });

            modelBuilder.Entity("API.Models.Empresa", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("Departamentos");
                });

            modelBuilder.Entity("API.Models.PlanTrabajo", b =>
                {
                    b.Navigation("PlanTrabajoPuntos");
                });

            modelBuilder.Entity("API.Models.Riesgo", b =>
                {
                    b.Navigation("AnalisisRiesgos");
                });

            modelBuilder.Entity("API.Models.Rol", b =>
                {
                    b.Navigation("UserRols");
                });

            modelBuilder.Entity("API.Models.Usuario", b =>
                {
                    b.Navigation("PlanTrabajoIdAuditorAsignadoNavigations");

                    b.Navigation("PlanTrabajoIdResponsableAreaAuditadaNavigations");

                    b.Navigation("UserRols");
                });
#pragma warning restore 612, 618
        }
    }
}
