// <auto-generated />
using System;
using API.Data.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Data.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    partial class ApiUserDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API.Data.Entities.AnalisisRiesgo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Activo")
                        .HasColumnType("bit")
                        .HasColumnName("activo");

                    b.Property<string>("AgenteGenerador")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("agente_generador");

                    b.Property<string>("Causa")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("causa");

                    b.Property<string>("Codigo")
                        .HasMaxLength(5)
                        .HasColumnType("nchar(5)")
                        .HasColumnName("codigo")
                        .IsFixedLength();

                    b.Property<string>("Efecto")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("efecto");

                    b.Property<int?>("IdArea")
                        .HasColumnType("int")
                        .HasColumnName("id_area");

                    b.Property<int?>("IdRiesgo")
                        .HasColumnType("int")
                        .HasColumnName("id_riesgo");

                    b.Property<int>("Impacto")
                        .HasColumnType("int")
                        .HasColumnName("impacto");

                    b.Property<string>("NivelRiesgo")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("nivel_riesgo")
                        .IsFixedLength();

                    b.Property<int>("Probabilidad")
                        .HasColumnType("int")
                        .HasColumnName("probabilidad");

                    b.Property<int>("Resultado")
                        .HasColumnType("int")
                        .HasColumnName("resultado");

                    b.Property<string>("Significado")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("significado");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "IdArea" }, "IX_analisis_riesgo_id_area");

                    b.HasIndex(new[] { "IdRiesgo" }, "IX_analisis_riesgo_id_riesgo");

                    b.ToTable("analisis_riesgo", (string)null);
                });

            modelBuilder.Entity("API.Data.Entities.ApiUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("API.Data.Entities.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("descripcion");

                    b.Property<int>("IdDepartamento")
                        .HasColumnType("int")
                        .HasColumnName("id_departamento");

                    b.Property<int?>("IdEmpresa")
                        .HasColumnType("int")
                        .HasColumnName("id_empresa");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "IdDepartamento" }, "IX_area_id_departamento");

                    b.HasIndex(new[] { "IdEmpresa" }, "IX_area_id_empresa");

                    b.ToTable("area", (string)null);
                });

            modelBuilder.Entity("API.Data.Entities.Departamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("descripcion");

                    b.Property<int>("IdEmpresa")
                        .HasColumnType("int")
                        .HasColumnName("id_empresa");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "IdEmpresa" }, "IX_departamento_id_empresa");

                    b.ToTable("departamento", (string)null);
                });

            modelBuilder.Entity("API.Data.Entities.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<string>("CodigoEmpresa")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("codigo_empresa");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("direccion");

                    b.Property<DateTime?>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_creacion")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_modificacion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nombre");

                    b.Property<string>("Ruc")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ruc");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("telefono");

                    b.Property<int?>("UsuarioCreacion")
                        .HasColumnType("int")
                        .HasColumnName("usuario_creacion");

                    b.Property<int?>("UsuarioModificacion")
                        .HasColumnType("int")
                        .HasColumnName("usuario_modificacion");

                    b.HasKey("Id");

                    b.ToTable("empresa", (string)null);
                });

            modelBuilder.Entity("API.Data.Entities.PlanTrabajo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Activo")
                        .HasColumnType("bit")
                        .HasColumnName("activo");

                    b.Property<int?>("CantidadPersonas")
                        .HasColumnType("int")
                        .HasColumnName("cantidad_personas");

                    b.Property<string>("Codigo")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("codigo");

                    b.Property<string>("EnvioInforme")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("envio_informe")
                        .IsFixedLength();

                    b.Property<string>("Estado")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("estado")
                        .IsFixedLength();

                    b.Property<DateOnly?>("FechaCreada")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("fecha_creada")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly?>("FechaFinAuditoria")
                        .HasColumnType("date")
                        .HasColumnName("fecha_fin_auditoria");

                    b.Property<DateOnly?>("FechaIncioAuditoria")
                        .HasColumnType("date")
                        .HasColumnName("fecha_incio_auditoria");

                    b.Property<int?>("HorasNetas")
                        .HasColumnType("int")
                        .HasColumnName("horas_netas");

                    b.Property<int?>("IdArea")
                        .HasColumnType("int")
                        .HasColumnName("id_area");

                    b.Property<int?>("IdAuditorAsignado")
                        .HasColumnType("int")
                        .HasColumnName("id_auditor_asignado");

                    b.Property<int?>("IdDepartamento")
                        .HasColumnType("int")
                        .HasColumnName("id_departamento");

                    b.Property<int?>("IdResponsableAreaAuditada")
                        .HasColumnType("int")
                        .HasColumnName("id_responsable_area_auditada");

                    b.Property<int?>("IdUserCreada")
                        .HasColumnType("int")
                        .HasColumnName("id_user_creada");

                    b.Property<int?>("Numero")
                        .HasColumnType("int")
                        .HasColumnName("numero");

                    b.Property<string>("Objetivos")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("objetivos");

                    b.Property<string>("Procedimientos")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("procedimientos");

                    b.Property<int?>("Productos")
                        .HasColumnType("int")
                        .HasColumnName("productos");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "IdAuditorAsignado" }, "IX_plan_trabajo_id_auditor_asignado");

                    b.HasIndex(new[] { "IdDepartamento" }, "IX_plan_trabajo_id_departamento");

                    b.HasIndex(new[] { "IdResponsableAreaAuditada" }, "IX_plan_trabajo_id_responsable_area_auditada");

                    b.ToTable("plan_trabajo", (string)null);
                });

            modelBuilder.Entity("API.Data.Entities.PlanTrabajoCronograma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdPlanTrabajo")
                        .HasColumnType("int")
                        .HasColumnName("id_plan_trabajo");

                    b.Property<int>("CantidadHoras")
                        .HasColumnType("int")
                        .HasColumnName("cantidad_horas");

                    b.Property<DateOnly>("Fecha")
                        .HasColumnType("date")
                        .HasColumnName("fecha");

                    b.HasKey("Id", "IdPlanTrabajo");

                    b.HasIndex("IdPlanTrabajo");

                    b.ToTable("plan_trabajo_cronograma", (string)null);
                });

            modelBuilder.Entity("API.Data.Entities.PlanTrabajoPunto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Activo")
                        .HasColumnType("bit")
                        .HasColumnName("activo");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("descripcion");

                    b.Property<int>("IdPlanTrabajo")
                        .HasColumnType("int")
                        .HasColumnName("id_plan_trabajo");

                    b.Property<string>("TipoPunto")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasDefaultValue("L")
                        .HasColumnName("tipo_punto")
                        .IsFixedLength()
                        .HasComment("L : levantamiento - D : descargo");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "IdPlanTrabajo" }, "IX_plan_trabajo_puntos_id_plan_trabajo");

                    b.ToTable("plan_trabajo_puntos", (string)null);
                });

            modelBuilder.Entity("API.Data.Entities.Riesgo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Activo")
                        .HasColumnType("bit")
                        .HasColumnName("activo");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("descripcion");

                    b.Property<int?>("UserCreado")
                        .HasColumnType("int")
                        .HasColumnName("user_creado");

                    b.HasKey("Id");

                    b.ToTable("riesgo", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("API.Data.Entities.AnalisisRiesgo", b =>
                {
                    b.HasOne("API.Data.Entities.Area", "IdAreaNavigation")
                        .WithMany("AnalisisRiesgos")
                        .HasForeignKey("IdArea")
                        .HasConstraintName("FK_analisis_riesgo_area");

                    b.HasOne("API.Data.Entities.Riesgo", "IdRiesgoNavigation")
                        .WithMany("AnalisisRiesgos")
                        .HasForeignKey("IdRiesgo")
                        .HasConstraintName("FK_analisis_riesgo_riesgo");

                    b.Navigation("IdAreaNavigation");

                    b.Navigation("IdRiesgoNavigation");
                });

            modelBuilder.Entity("API.Data.Entities.Area", b =>
                {
                    b.HasOne("API.Data.Entities.Departamento", "IdDepartamentoNavigation")
                        .WithMany("Areas")
                        .HasForeignKey("IdDepartamento")
                        .IsRequired()
                        .HasConstraintName("FK_area_departamento");

                    b.HasOne("API.Data.Entities.Empresa", "IdEmpresaNavigation")
                        .WithMany("Areas")
                        .HasForeignKey("IdEmpresa")
                        .HasConstraintName("FK_area_empresa");

                    b.Navigation("IdDepartamentoNavigation");

                    b.Navigation("IdEmpresaNavigation");
                });

            modelBuilder.Entity("API.Data.Entities.Departamento", b =>
                {
                    b.HasOne("API.Data.Entities.Empresa", "IdEmpresaNavigation")
                        .WithMany("Departamentos")
                        .HasForeignKey("IdEmpresa")
                        .IsRequired()
                        .HasConstraintName("FK_departamento_empresa");

                    b.Navigation("IdEmpresaNavigation");
                });

            modelBuilder.Entity("API.Data.Entities.PlanTrabajo", b =>
                {
                    b.HasOne("API.Data.Entities.Departamento", "IdDepartamentoNavigation")
                        .WithMany("PlanTrabajos")
                        .HasForeignKey("IdDepartamento")
                        .HasConstraintName("FK_plan_trabajo_departamento");

                    b.Navigation("IdDepartamentoNavigation");
                });

            modelBuilder.Entity("API.Data.Entities.PlanTrabajoCronograma", b =>
                {
                    b.HasOne("API.Data.Entities.PlanTrabajo", "IdPlanTrabajoNavigation")
                        .WithMany("PlanTrabajoCronogramas")
                        .HasForeignKey("IdPlanTrabajo")
                        .IsRequired()
                        .HasConstraintName("FK_plan_trabajo_cronog_plan_trabajo");

                    b.Navigation("IdPlanTrabajoNavigation");
                });

            modelBuilder.Entity("API.Data.Entities.PlanTrabajoPunto", b =>
                {
                    b.HasOne("API.Data.Entities.PlanTrabajo", "IdPlanTrabajoNavigation")
                        .WithMany("PlanTrabajoPuntos")
                        .HasForeignKey("IdPlanTrabajo")
                        .IsRequired()
                        .HasConstraintName("FK_plan_trabajo_puntos_plan_trabajo");

                    b.Navigation("IdPlanTrabajoNavigation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("API.Data.Entities.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("API.Data.Entities.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Data.Entities.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("API.Data.Entities.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Data.Entities.Area", b =>
                {
                    b.Navigation("AnalisisRiesgos");
                });

            modelBuilder.Entity("API.Data.Entities.Departamento", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("PlanTrabajos");
                });

            modelBuilder.Entity("API.Data.Entities.Empresa", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("Departamentos");
                });

            modelBuilder.Entity("API.Data.Entities.PlanTrabajo", b =>
                {
                    b.Navigation("PlanTrabajoCronogramas");

                    b.Navigation("PlanTrabajoPuntos");
                });

            modelBuilder.Entity("API.Data.Entities.Riesgo", b =>
                {
                    b.Navigation("AnalisisRiesgos");
                });
#pragma warning restore 612, 618
        }
    }
}
